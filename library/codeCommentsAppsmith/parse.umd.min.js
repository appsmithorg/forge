!function(e,t){"function"==typeof define&&define.amd?define([],t):"object"==typeof module&&module.exports?module.exports=t():e.JSDocParser=t()}("undefined"!=typeof self?self:this,(function(){"use strict";return{jsdocRegex:/\/\*\*([\s\S]*?)\*\//g,functionNameRegex:/\/\*\*([\s\S]*?)\*\/\s*([\w]+)\s*\(/g,descriptionRegex:/^[\s\S]*?(?=@)/,paramRegex:/@param\s+{([\s\S]*?)}\s+([a-zA-Z_$][0-9a-zA-Z_$]*)\s*-([\s\S]*?)(?=@|$)/g,returnRegex:/@returns?\s+{([\s\S]*?)}\s*-([\s\S]*?)(?=@|$)/g,parse:function(e){return(e.match(this.jsdocRegex)||[]).map((t=>this.parseComment(t,e)))},parseComment:function(e,t){const n=this.functionNameRegex.exec(t),s=e.match(this.descriptionRegex),r=[...e.matchAll(this.paramRegex)],i=[...e.matchAll(this.returnRegex)];return{functionName:n?n[2]:null,description:s?this.cleanDescription(s[0]):null,parameters:r.map((e=>({type:e[1].trim(),name:e[2].trim(),description:e[3].trim()}))),returns:i.map((e=>({type:e[1].trim(),description:e[2].trim()})))}},cleanDescription:function(e){return e.replace(/\/\*\*|\*\//g,"").replace(/\n\s*\* ?/g," ").trim()},test:function(){return this.parse(SampleCode.body)}}}));
